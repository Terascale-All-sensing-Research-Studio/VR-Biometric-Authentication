import argparse
import os
import matplotlib.pyplot as plt

parser = argparse.ArgumentParser(description='Get Information to print results nicely')
parser.add_argument('InDir', type=str,
                    help='Directory with network outputs (intermediate output)')
parser.add_argument('Filename', type=str,
                    help='Filename to write to')
parser.add_argument('--Epoch', type=int, default=-1,
                    help='Epoch to load (by default last epoch trained)')
parser.add_argument('--CorrectOnly', action='store_const', const=True, default=False,
                    help='Enables so the histogram is generated by same user pairs only')

args = parser.parse_args()
assert(os.path.isdir(args.InDir))

assert(os.path.isdir(os.path.join(args.InDir, '0'))), 'No fold outputs found in <{}>'.format(args.InDir)
foldPath = os.path.join(args.InDir, '0')
Epochs = [x.replace('FoldAcc', '') for x in os.listdir(foldPath) if 'FoldAcc' in x]
Epochs = [int(x.split('.')[0]) for x in Epochs]
print(Epochs)
if args.Epoch == -1:
    assert(len(Epochs) > 0), 'No files found in <{}>'.format(foldPath)
    EpochToLoad = max(Epochs)
else:
    assert(args.Epoch in Epochs), 'No results at epoch <{}>'.format(args.Epoch)
    EpochToLoad = args.Epoch

QueryThrowTestThrowMatch = [[0 for _ in range(10)] for _ in range(10)]
assignments = 0
looked_at = 0
foldDirs = os.listdir(args.InDir)
for foldDir in foldDirs:
    NetworkOutputFile = os.path.join(args.InDir, foldDir, 'FoldAcc{}.csv'.format(EpochToLoad))
    assert(os.path.isfile(NetworkOutputFile)), 'Couldn\'t find network output file: {}'.format(NetworkOutputFile)
    
    with open(NetworkOutputFile, 'r') as f:
        lines = f.readlines()

    QueryThrow = -1
    PredThrow = -1
    MinDist = 10000.0
    for line in lines:
        if line[0] == ',':
            QueryThrowTestThrowMatch[QueryThrow][PredThrow] += 1
            assignments += 1
            QueryThrow = -1
            PredThrow = -1
            MinDist = 10000.0
            continue

        Q_U, Q_T, L_U, L_T, NV = line.split(',')[:5]
        if args.CorrectOnly and int(Q_U) != int(L_U):
            continue
        NV = float(NV) 
        looked_at += 1
        if NV < MinDist:
            MinDist = NV
            PredThrow = int(L_T)
        QueryThrow = int(Q_T)

print('Added {} values to the histograms'.format(assignments))
print('Looked at {} values in total'.format(looked_at))
fig, ax = plt.subplots(2, 5)
fig.suptitle('Temporal Location of Best Match For Each Query Throw')
for Q_T in range(10):
    ax[Q_T//5, Q_T%5].bar(x=[x for x in range(10)], height=QueryThrowTestThrowMatch[Q_T])
    ax[Q_T//5, Q_T%5].set_title('Query {}'.format(Q_T))
    print(', '.join([str(N) for N in QueryThrowTestThrowMatch[Q_T]]+[str(sum(QueryThrowTestThrowMatch[Q_T]))]))

plt.tight_layout()
plt.savefig(args.Filename)

    


